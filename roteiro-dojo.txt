Dojô - Automação de execução de teste de API com Postman - Básico

Vamos cobrir alguns recursos de automação no Postman, incluindo:
1 - Importação de collection a partir do Swagger
2 - Escopo e Criação de variáveis de ambiente, collection e globais
3 - Autenticação automática através do Pré-request
4 - Execução em massa e uso do CSV para alimentar variáveis pelo Runner
5 - Uso do Post-request para salvar retorno em variáveis
6 - Usar assertions para validar as execuções

_____________________________________

1 - Importação de collection a partir do Swagger
1.1 - acessar o swegger que vamos utilizar para o teste

https://serverest.dev/

1.2 - Criar um workspace para nosso Dojo

Automação de execução de teste

1.3 - Fazer a importação dos endpoints do serverest

2 - Escopo e Criação de variáveis de ambiente, collection e globais
2.1 - Escopo das variáveis

Listar Produtos: {{baseUrl}}/produtos
local, Collection, Enviroment, Global e Vault(cofre)

2.2 - Cadastrar Produtos
###########
{
  "nome": "Monitor LG 29 Polegadas",
  "preco": "600",
  "descricao": "Monitor LG 29 polegadas Full HD",
  "quantidade": "10"
}
###########

Endpoint com autenticação

{{baseUrl}}/login
{
  "email": "fulano@qa.com",
  "password": "teste"
}

{{apiKey}} -> 
{{access_token}} ->

3 - Autenticação automática através do Pré-request
3.1 - Automação do login - serverest.dev
###########
pm.sendRequest({
    url: pm.collectionVariables.get("baseUrl") + "/login",
    method: 'POST',
    body: {
        mode: 'raw',
        options: {
			raw: {
				language: "json"
			},            
        },
		raw: JSON.stringify({
			email: "fulano@qa.com",
			password: "teste"
		})
    }
},
    (err, res) => {
        console.log(res.json().authorization);
		
        let  auth = res.json().authorization.split(" ")
        console.log(auth);
        console.log(auth[1]);
		
//		  pm.variables.set("{{access_token}}", auth[1]);        		
        pm.collectionVariables.set("{{access_token}}", auth[1]);
//        pm.environment.set("access_token", auth[1]);
//        pm.globals.set("{{access_token}}", auth[1]);        

});
###########

3.2 - Automação do token - POUPEX
###########
pm.sendRequest({
    url: "https://" + pm.environment.get("url_token") + "/f5-oauth2/v1/token",
    method: 'POST',
    header: {
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: {
        mode: 'urlencoded',
        urlencoded: [
            {key: 'grant_type', value: "client_credentials"},
            {key: 'client_id', value: pm.environment.get("client_id")},
            {key: 'client_secret', value: pm.environment.get("client_secret")},
        ]
    }
},
    (err, res) => {
		console.log(res.json().access_token);
//		  pm.variables.set("{{access_token}}", , res.json().access_token);
		pm.collectionVariables.set("{{access_token}}", res.json().access_token);
        pm.environment.set("access_token",res.json().access_token);
		pm.globals.set("{{access_token}}", res.json().access_token);

});
###########

4 - Execução em massa e uso do CSV para alimentar variáveis pelo Runner
4.1 - Criar uma pasta "Cadastrar produto Runner"

Copiar o cadastro de produto
###########
{
  "nome": "{{nome}}",
  "preco": "{{preco}}",
  "descricao": "{{descricao}}",
  "quantidade": "{{quantidade}}"
}
###########

4.2 - Criar o arquivo CSV que vai alimentar as variáveis do Runner

5 - Uso do Post-request para salvar retorno em variáveis
###########
let responses = pm.collectionVariables.has('collectionResponses') ? JSON.parse(pm.collectionVariables.get('collectionResponses')) : [];

var responseBody = pm.response.json();
var produto = {
	id: responseBody._id
}

responses.push(produto);
strJson = JSON.stringify(responses)

pm.collectionVariables.set('collectionResponses', strJson)
console.log(strJson);
#########

6 - Usar assertions para validar as execuções
###########
pm.test("Status code is 201", () => {
  pm.response.to.have.status(201);
});

pm.test("Retornou um ID", () => {
  pm.expect(responseBody._id).to.not.eql(null);
});
###########

7 - Desafio
7.1 - Excluir os produtos que foram inseridos no mesmo runner

8 - Referência
https://github.com/ronaldormelo/dojo-teste-de-api-postman
https://learning.postman.com/docs/tests-and-scripts/tests-and-scripts/
